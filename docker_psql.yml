---
- hosts: app
  become: true

  tasks:
  
  # Install Docker on Ubuntu
  
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
      when: ansible_facts['distribution']=="Ubuntu"

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common' ]
      when: ansible_facts['distribution']=="Ubuntu"

    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: ansible_facts['distribution']=="Ubuntu"

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      when: ansible_facts['distribution']=="Ubuntu"
      
    - name: Update apt and install Docker-ce
      apt: update_cache=yes name=docker-ce state=latest
      when: ansible_facts['distribution']=="Ubuntu"


    - name: Install Python
      apt: name={{ item }} state=latest update_cache=yes
      loop: ['python3-pip', 'virtualenv', 'python3-setuptools']
      when: ansible_facts['distribution']=="Ubuntu"

    - name: Install Docker module for Python
      pip:
        name: docker
      when: ansible_facts['distribution']=="Ubuntu"
 
 #Install Docker on CentOS      
  
  
    - name: Install yum utils
      yum:
        name: yum-utils
        state: latest
      when: ansible_facts['distribution']=="CentOS"  
 
    - name: Install device-mapper-persistent-data and lvm2
      yum: name={{ item }} state=latest update_cache=yes
      loop: ['device-mapper-persistent-data', 'lvm2']
      when: ansible_facts['distribution']=="CentOS"  

    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      become: yes
      when: ansible_facts['distribution']=="CentOS"  
 
    - name: Install Docker
      package:
        name: docker-ce
        state: latest
      become: yes
      when: ansible_facts['distribution']=="CentOS"  
      
    - name: Start Docker
      ansible.builtin.service:
        name: "docker"
        enabled: true
        state: started


- hosts: database
  become: true

  tasks:
    - name: Install packages
      ansible.builtin.apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
        state: present

    - name: Check if PostgreSQL is initialized
      ansible.builtin.stat:
        path: "{{ postgresql_data_dir }}/pg_hba.conf"
      register: postgres_data

    - name: Empty data dir
      ansible.builtin.file:
        path: "{{ postgresql_data_dir }}"
        state: absent
      when: not postgres_data.stat.exists

    - name: Initialize PostgreSQL
      ansible.builtin.shell: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
      become: true
      become_user: postgres
      when: not postgres_data.stat.exists

    - name: Start and enable service
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: true
